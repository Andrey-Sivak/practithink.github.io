@mixin response-to ( $breakpoint ) {
  @if( map-has-key( $breakpoints, $breakpoint ) ) {
    @media( max-width: #{map-get( $breakpoints, $breakpoint ) } ) {
      @content;
    }
  }

  @else {
    @warn 'Unfortunately, no value could be retrieved from `#{$breakpoint}` . ' +
      'Please make sure it is defined in `$breakpoints` map.';
  }
}

@mixin font-face($path, $family, $type: null, $extension: null, $style: null) {
  // font-weight values map
  $font-weights: (
          'Thin': 100,
          'ExtraLight': 200,
          'Light': 300,
          'Regular': 400,
          'Medium': 500,
          'SimiBold': 600,
          'Bold': 700,
          'ExtraBold': 800,
          'Black': 900,
          'ExtraBlack': 950
  );

  @font-face {
    font-family: $family;

    // set font-weight property
    @if $type {
      @each $weight-name, $weight-value in $font-weights {
        @if $type == $weight-name {
          font-weight: $weight-value;
        }
      }
    } @else {
      font-weight: 400;
    }

    // check font extension and font-type and then set src property
    @if $extension and $type {
      src: url('#{$path}/#{$family}-#{$type}.#{$extension}') format('truetype');
    } @else if $extension or $type {
      @if $type {
        src: url('#{$path}/#{$family}-#{$type}.ttf') format('truetype');
      } @else if $extension {
        src: url('#{$path}/#{$family}.#{$extension}') format('truetype');
      }
    } @else {
      src: url('#{$path}/#{$family}.ttf');
    }

    // set font-style property
    @if $style {
      font-style: $style;
    } @else {
      font-style: normal;
    }
  }
}

@mixin flex( $direction: row, $j-c: flex-start, $a-i: flex-start, $flex-wrap: wrap ) {
  display: flex;
  flex-direction: $direction;
  justify-content: $j-c;
  align-items: $a-i;
  flex-wrap: $flex-wrap;
}

@mixin flex-center( $direction: row, $flex-wrap: wrap) {
  @include flex( $direction, center, center, $flex-wrap );
}

@mixin on-event {
  &:hover,
  &:active,
  &:focus {
    @content;
  }
}

@mixin pos-absolute( $top: null, $right: null, $bottom: null, $left: null ) {
  position: absolute;
  top: $top;
  right: $right;
  bottom: $bottom;
  left: $left;
}

@mixin transition-ease {
  transition: all .3s ease-in-out;
}